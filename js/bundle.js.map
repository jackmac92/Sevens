{"version":3,"sources":["webpack:///webpack/bootstrap 7860368d1ea24f83c792","webpack:///./js/sevens.coffee","webpack:///./js/game.coffee","webpack:///./js/board.coffee","webpack:///./js/tile.coffee","webpack:///./js/gameView.coffee","webpack:///./~/mousetrap/mousetrap.js"],"names":[],"mappings":"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A;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,eAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAe;AACf;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,eAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,eAAc;AACd;AACA;;AAEA;AACA;AACA;AACA;AACA,oBAAmB,QAAQ;AAC3B;AACA;;AAEA;AACA;AACA;AACA,gBAAe,QAAQ;AACvB;AACA;;AAEA;AACA;AACA;AACA,gBAAe,qBAAqB;AACpC,gBAAe,OAAO;AACtB,gBAAe,SAAS;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,gBAAe,MAAM;AACrB,iBAAgB;AAChB;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,gBAAe,MAAM;AACrB,gBAAe,MAAM;AACrB,kBAAiB;AACjB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,gBAAe,MAAM;AACrB,kBAAiB;AACjB;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,gBAAe,MAAM;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,gBAAe,MAAM;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,gBAAe,OAAO;AACtB,kBAAiB;AACjB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,iBAAgB;AAChB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,gBAAe,OAAO;AACtB,gBAAe,MAAM;AACrB,gBAAe,QAAQ;AACvB;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,iBAAgB,OAAO;AACvB,iBAAgB;AAChB;AACA;AACA;AACA;AACA;;AAEA,+CAA8C,EAAE;AAChD;AACA;;AAEA;AACA;AACA;AACA,iBAAgB,OAAO;AACvB,iBAAgB,QAAQ;AACxB,kBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,oBAAmB,iBAAiB;AACpC;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,mBAAkB;AAClB;AACA;;AAEA;AACA;AACA;AACA,mBAAkB;AAClB;AACA;;AAEA;AACA;AACA;AACA,mBAAkB;AAClB;AACA;;AAEA;AACA;AACA;AACA;AACA,mBAAkB;AAClB;AACA;;AAEA;AACA;AACA;AACA,mBAAkB;AAClB;AACA;;AAEA;AACA;AACA;AACA,mBAAkB;AAClB;AACA;;AAEA;AACA;AACA;AACA,mBAAkB;AAClB;AACA;;AAEA;AACA;AACA;AACA;AACA,mBAAkB;AAClB;AACA;;AAEA;AACA;AACA;AACA,oBAAmB,OAAO;AAC1B;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,oBAAmB,OAAO;AAC1B,oBAAmB,MAAM;AACzB,oBAAmB,aAAa;AAChC,oBAAmB,QAAQ;AAC3B,oBAAmB,QAAQ;AAC3B,oBAAmB,QAAQ;AAC3B,sBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,wBAAuB,uCAAuC;AAC9D;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAmB,SAAS;AAC5B,oBAAmB,MAAM;AACzB;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,oBAAmB,OAAO;AAC1B,oBAAmB,MAAM;AACzB,oBAAmB,MAAM;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,wBAAuB,sBAAsB;AAC7C;AACA;AACA;AACA;;AAEA;AACA,wBAAuB,sBAAsB;;AAE7C;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,oBAAmB,MAAM;AACzB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,oBAAmB,OAAO;AAC1B,oBAAmB,MAAM;AACzB,oBAAmB,SAAS;AAC5B,oBAAmB,QAAQ;AAC3B;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,wBAAuB,OAAO;AAC9B,0BAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,wBAAuB,MAAM;AAC7B;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA2B,iBAAiB;AAC5C;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,oBAAmB,OAAO;AAC1B,oBAAmB,SAAS;AAC5B,oBAAmB,QAAQ;AAC3B,oBAAmB,QAAQ;AAC3B,oBAAmB,QAAQ;AAC3B;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA,oDAAmD,kBAAkB;;AAErE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa;AACb;;AAEA;AACA;AACA;AACA,oBAAmB,MAAM;AACzB,oBAAmB,SAAS;AAC5B,oBAAmB,iBAAiB;AACpC;AACA;AACA;AACA,4BAA2B,yBAAyB;AACpD;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAe,aAAa;AAC5B,gBAAe,SAAS;AACxB,gBAAe,QAAQ;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAe,aAAa;AAC5B,gBAAe,OAAO;AACtB;AACA;AACA;AACA;AACA,wDAAuD;AACvD;;AAEA;AACA;AACA;AACA,gBAAe,OAAO;AACtB,gBAAe,QAAQ;AACvB;AACA;AACA;AACA;AACA;AACA,oDAAmD;AACnD;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,gBAAe,MAAM;AACrB,gBAAe,QAAQ;AACvB,iBAAgB;AAChB;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA,EAAC","file":"./js/bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap 7860368d1ea24f83c792\n **/","Game = require './game.coffee'\nGameView = require './gameView.coffee'\n\npreventScroll = ->\n\twindow.addEventListener('keydown', (e) ->\n\t\tif [32,37,38,39,40].indexOf(e.keyCode) > -1\n\t\t\te.preventDefault()\n\t, false)\n\n$ ->\n\tpreventScroll()\n\tgameRoot = $ \"#sevens\"\n\tgame = new Game()\n\tnew GameView(game, gameRoot)\n\twindow.game = game\n\n\n\n/** WEBPACK FOOTER **\n ** ./js/sevens.coffee\n **/","Board = require './board.coffee'\nclass Game\n\tconstructor: ->\n\t\t@board = new Board()\n\t\t@tiles = -> @board.tiles()\n\n\t\n\n\tmakeMove: (dir) ->\n\t\tunless @gameFinished()\n\t\t\t@board.makeMove dir\n\n\tgameFinished: ->\n\t\tfor row in @board.grid\n\t\t\tfor spot in row\n\t\t\t\tif spot == null\n\t\t\t\t\treturn false\n\t\t\t\telse\n\t\t\t\t\tcurrTile = spot\n\t\t\t\t\tfor tile in @board.surroundingTiles currTile.pos\n\t\t\t\t\t\tif currTile.canMergeWith tile.value\n\t\t\t\t\t\t\treturn false\n\t\ttrue\n\tvalueToScore: (val) ->\n\t\t7**((Math.log(val/7)/ Math.LN2)+1)\n\n\tscore: ->\n\t\tcurrScore = 0\n\t\tfor id, tile of @tiles()\n\t\t\tif tile.value > 5\n\t\t\t\tcurrScore += @valueToScore(tile.value)\n\t\tcurrScore\n\n\tdataForRender: ->\n\t\tcurrTiles = {}\n\t\tfor id, tile of @tiles()\n\t\t\tcurrTiles[tile.renderIdx()] = tile.value\n\t\tcurrTiles\n\n\n\nmodule.exports = Game\n\n\n\n/** WEBPACK FOOTER **\n ** ./js/game.coffee\n **/","Tile = require './tile.coffee'\nclass Board\n\tconstructor: ->\n\t\t@grid = @setupGrid()\n\t\t@tilesStore = {}\n\t\tdirs = [\"N\",\"E\",\"W\",\"S\"]\n\t\t@lastMoveDir = dirs[Math.floor(Math.random() * dirs.length)];\n\t\t@nextTile = @nextTileValue()\n\t\t@replaceTile()\n\t\t@replaceTile()\n\ttiles: ->\n\t\tfor id, tile of @tilesStore\n\t\t\ttile\n\n\tsurroundingTiles: (pos) ->\n\t\tdeltas = [[0,1],[0,-1],[1,0],[-1,0]]\n\t\tresult = []\n\t\tfor d in deltas\n\t\t\tnewPos = [pos[0]+d[0], pos[1]+d[1]]\n\t\t\tif @isValidPosition(newPos) && @tileAt(newPos)\n\t\t\t\tresult.push @tileAt(newPos)\n\t\tresult\n\n\tdeltaTilePattern: (dir) ->\n\t\tswitch dir\n\t\t\twhen \"N\"\n\t\t\t\t@tilesByRow()\n\t\t\twhen \"E\"\n\t\t\t\t@tilesByColumn().reverse()\n\t\t\twhen \"W\"\n\t\t\t\t@tilesByColumn()\n\t\t\twhen \"S\"\n\t\t\t\t@tilesByRow().reverse()\n\n\tmakeMove: (dir) ->\n\t\t@lastMoveDir = dir\n\t\tdelta = @deltas[dir]\n\t\tmovingTiles = @deltaTilePattern dir\n\t\tfor tile in movingTiles\n\t\t\tcurrPos = tile.pos\n\t\t\tnewPos = [currPos[0] + delta[0], currPos[1] + delta[1]]\t\n\t\t\tif @spotAvailable newPos\n\t\t\t\t@moveTileTo(tile, newPos)\n\t\t\telse if @isValidPosition newPos\n\t\t\t\tdestTile = @tileAt(newPos)\n\t\t\t\tif tile.canMergeWith destTile.value \n\t\t\t\t\t@mergeTiles tile, destTile\n\t\t@replaceTile()\n\n\tspotAvailable: (pos) ->\n\t\t@isValidPosition(pos) && @isEmptyPosition(pos)\n\n\tisValidPosition: (pos) ->\n\t\tpos[0] < 4 && pos[1] < 4 && pos[0] >= 0 && pos[1] >= 0\n\n\ttileAt: (pos) ->\n\t\t@grid[pos[1]][pos[0]]\n\n\tsetTileAt: (pos, val) ->\n\t\t@grid[pos[1]][pos[0]] = val\n\n\ttilesByRow: ->\n\t\trowTiles = {}\n\t\tfor tile in @tiles()\n\t\t\trowTiles[tile.pos[1]] = rowTiles[tile.pos[1]] || []\n\t\t\trowTiles[tile.pos[1]].push(tile)\n\t\tcurrTiles = []\n\t\tfor row, tilegroup of rowTiles\n\t\t\tfor tile in tilegroup\n\t\t\t\tcurrTiles.push tile\n\t\tcurrTiles\n\n\ttilesByColumn: ->\n\t\tcolumnTiles = {}\n\t\tfor tile in @tiles()\n\t\t\tcolumnTiles[tile.pos[0]] = columnTiles[tile.pos[0]] || []\n\t\t\tcolumnTiles[tile.pos[0]].push(tile)\n\t\tcurrTiles = []\n\t\tfor column, tilegroup of columnTiles\n\t\t\tfor tile in tilegroup\n\t\t\t\tcurrTiles.push tile\n\t\tcurrTiles\n\n\tisEmptyPosition: (pos) ->\n\t\t@tileAt(pos) == null\n\n\tmoveTileTo: (tile, dest) ->\n\t\t@setTileAt(tile.pos, null)\n\t\t@setTileAt(dest, tile)\n\t\ttile.moveTo(dest)\n\n\tmergeTiles: (sourceTile, receivingTile) ->\n\t\t@grid[sourceTile.pos[1]][sourceTile.pos[0]] = null\n\t\treceivingTile.value += sourceTile.value\n\t\tdelete @tilesStore[sourceTile.id]\n\t\n\tnextTileValue: ->\n\t\trand = Math.floor Math.random() * 100\n\t\tif rand < 51\n\t\t\tval = 3\n\t\telse\n\t\t\tval = 4\n\t\t@nextTile = val\n\t\t\n\n\treplaceTilePos: ->\n\t\t[x, y] = @entryPositions[@lastMoveDir]\n\t\toptions = []\n\t\tif x == \"*\"\n\t\t\tfor i in [0..3]\n\t\t\t\tif @spotAvailable [i, y]\n\t\t\t\t\toptions.push [i,y]\n\t\telse\n\t\t\tfor i in [0..3]\n\t\t\t\tif @spotAvailable [x, i]\n\t\t\t\t\toptions.push [x,i]\n\t\t\n\t\toptions[Math.floor(Math.random() * options.length)]\n\n\treplaceTile: ->\n\t\tpos = @replaceTilePos()\t\t\t\n\t\t@addTile(pos, @nextTile)\n\t\t@nextTile = @nextTileValue()\n\n\taddTile: (pos, val) ->\n\t\tnewTile = new Tile(pos, val)\n\t\t@grid[pos[1]][pos[0]] = newTile\n\t\t@tilesStore[newTile.id] = newTile\n\n\tsetupGrid: ->\n\t\tgrid = []\n\t\tfor row in [0..3]\n\t\t\tgrid.push([])\n\t\t\tfor col in [0..3]\n\t\t\t\tgrid[row].push(null)\n\t\tgrid\n\n\tdeltas:\n\t\t\"N\":[0,-1]\n\t\t\"E\":[1, 0]\n\t\t\"W\":[-1, 0]\n\t\t\"S\":[0, 1]\n\n\tentryPositions:\n\t\t\"N\":[\"*\",3]\n\t\t\"E\":[0,\"*\"]\n\t\t\"W\":[3,\"*\"]\n\t\t\"S\":[\"*\",0]\n\nmodule.exports = Board\n\n\n\n/** WEBPACK FOOTER **\n ** ./js/board.coffee\n **/","class Tile\n\tidcounter = 0\n\tconstructor: (pos,value) ->\n\t\t@pos = pos\n\t\t@id = idcounter++\n\t\t@x = pos[0]\n\t\t@y = pos[1]\n\t\t@value = value\n\t\t@prev_pos = null\n\n\tmoveTo: (pos) ->\n\t\t@pos = pos\n\t\t@x = pos[0]\n\t\t@y = pos[1]\n\tcanMergeWith: (val) ->\n\t\tif val < 5\n\t\t\tval+@value == 7\n\t\telse\n\t\t\tval == @value\n\t\t\t\n\n\trenderIdx: ->\n\t\t@pos[1]*4 + @pos[0]\n\n\nmodule.exports = Tile\n\n\n/** WEBPACK FOOTER **\n ** ./js/tile.coffee\n **/","Mousetrap = require 'mousetrap'\n\nclass GameView\n\tconstructor: (game, gameRoot) ->\n\t\t@game = game\n\t\t@gameEl = gameRoot\n\t\t@setupBoard()\n\t\t@bindMoves()\n\t\t@renderBoard()\n\t\t@movable = true\n\n\tsetupBoard: ->\n\t\t$ul = $ '<ul>'\n\t\t$ul.addClass \"group\"\n\t\tfor row in [0..3]\n\t\t\tfor col in [0..3]\n\t\t\t\t$li = $ \"<li>\"\n\t\t\t\t$li.data(\"pos\", [row,col])\n\t\t\t\t$ul.append $li\n\t\t@gameEl.append($ul)\n\n\tbindMoves: ->\n\t\t@bindKeys()\n\t\t@bindSwipes()\n\n\tbindSwipes: ->\n\t\tself = this\n\t\t$(\"#sevens\").swipe\n\t\t\tswipeLeft: (event,direction,distance,duration, fingerCount) ->\n\t\t\t\tself.makeMove(\"W\")\n\t\t\tswipeRight: (event,direction,distance,duration, fingerCount) ->\n\t\t\t\tself.makeMove(\"E\")\n\t\t\tswipeUp: (event,direction,distance,duration, fingerCount) ->\n\t\t\t\tself.makeMove(\"N\")\n\t\t\tswipeDown: (event,direction,distance,duration, fingerCount) ->\n\t\t\t\tself.makeMove(\"S\")\n\t\t\ttriggerOnTouchEnd = false\n\t\t\tthreshold: 200  \n\n\tbindKeys: ->\n\t\tself = this\n\t\tMousetrap.bind([\"w\",\"up\"], -> self.makeMove(\"N\"))\n\t\tMousetrap.bind([\"d\",\"right\"], -> self.makeMove(\"E\"))\n\t\tMousetrap.bind([\"s\",\"down\"], -> self.makeMove(\"S\"))\n\t\tMousetrap.bind([\"a\",\"left\"], -> self.makeMove(\"W\"))\n\n\tclearBoard: ->\n\t\t$(\"li\").each (idx, li) ->\n\t\t\tli.dataset.tileValue = \"\"\n\t\t\tli.className = \"\"\n\n\trenderBoard: ->\n\t\t@clearBoard()\n\t\t@updateScore()\n\t\t@updateNextTile()\n\t\ttileData = @game.dataForRender()\n\t\t$(\"li\").each (idx, li) ->\n\t\t\tif tileData[idx.toString()]\n\t\t\t\tli.dataset.tileValue = tileData[idx]\n\t\t\t\tli.className = \"tile _\" + tileData[idx]\n\n\tupdateScore: ->\n\t\t$('#score').text(\"Score: \" + @game.score().toString())\n\n\tupdateNextTile: ->\n\t\t$('#next-tile').removeClass()\n\t\t$('#next-tile').addClass(\"_\"+@game.board.nextTile.toString())\n\n\n\tmakeMove: (dir) ->\n\t\tif @movable\n\t\t\t@movable = false\n\t\t\tself = this\n\t\t\tsetTimeout (-> self.movable = true), 50\n\t\t\t@game.makeMove(dir)\n\t\t\t@renderBoard()\n\t\t\tif @game.gameFinished()\n\t\t\t\t$('#modal1').openModal()\n\n\nmodule.exports = GameView\n\n\n/** WEBPACK FOOTER **\n ** ./js/gameView.coffee\n **/","/*global define:false */\n/**\n * Copyright 2015 Craig Campbell\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * Mousetrap is a simple keyboard shortcut library for Javascript with\n * no external dependencies\n *\n * @version 1.5.3\n * @url craig.is/killing/mice\n */\n(function(window, document, undefined) {\n\n    /**\n     * mapping of special keycodes to their corresponding keys\n     *\n     * everything in this dictionary cannot use keypress events\n     * so it has to be here to map to the correct keycodes for\n     * keyup/keydown events\n     *\n     * @type {Object}\n     */\n    var _MAP = {\n        8: 'backspace',\n        9: 'tab',\n        13: 'enter',\n        16: 'shift',\n        17: 'ctrl',\n        18: 'alt',\n        20: 'capslock',\n        27: 'esc',\n        32: 'space',\n        33: 'pageup',\n        34: 'pagedown',\n        35: 'end',\n        36: 'home',\n        37: 'left',\n        38: 'up',\n        39: 'right',\n        40: 'down',\n        45: 'ins',\n        46: 'del',\n        91: 'meta',\n        93: 'meta',\n        224: 'meta'\n    };\n\n    /**\n     * mapping for special characters so they can support\n     *\n     * this dictionary is only used incase you want to bind a\n     * keyup or keydown event to one of these keys\n     *\n     * @type {Object}\n     */\n    var _KEYCODE_MAP = {\n        106: '*',\n        107: '+',\n        109: '-',\n        110: '.',\n        111 : '/',\n        186: ';',\n        187: '=',\n        188: ',',\n        189: '-',\n        190: '.',\n        191: '/',\n        192: '`',\n        219: '[',\n        220: '\\\\',\n        221: ']',\n        222: '\\''\n    };\n\n    /**\n     * this is a mapping of keys that require shift on a US keypad\n     * back to the non shift equivelents\n     *\n     * this is so you can use keyup events with these keys\n     *\n     * note that this will only work reliably on US keyboards\n     *\n     * @type {Object}\n     */\n    var _SHIFT_MAP = {\n        '~': '`',\n        '!': '1',\n        '@': '2',\n        '#': '3',\n        '$': '4',\n        '%': '5',\n        '^': '6',\n        '&': '7',\n        '*': '8',\n        '(': '9',\n        ')': '0',\n        '_': '-',\n        '+': '=',\n        ':': ';',\n        '\\\"': '\\'',\n        '<': ',',\n        '>': '.',\n        '?': '/',\n        '|': '\\\\'\n    };\n\n    /**\n     * this is a list of special strings you can use to map\n     * to modifier keys when you specify your keyboard shortcuts\n     *\n     * @type {Object}\n     */\n    var _SPECIAL_ALIASES = {\n        'option': 'alt',\n        'command': 'meta',\n        'return': 'enter',\n        'escape': 'esc',\n        'plus': '+',\n        'mod': /Mac|iPod|iPhone|iPad/.test(navigator.platform) ? 'meta' : 'ctrl'\n    };\n\n    /**\n     * variable to store the flipped version of _MAP from above\n     * needed to check if we should use keypress or not when no action\n     * is specified\n     *\n     * @type {Object|undefined}\n     */\n    var _REVERSE_MAP;\n\n    /**\n     * loop through the f keys, f1 to f19 and add them to the map\n     * programatically\n     */\n    for (var i = 1; i < 20; ++i) {\n        _MAP[111 + i] = 'f' + i;\n    }\n\n    /**\n     * loop through to map numbers on the numeric keypad\n     */\n    for (i = 0; i <= 9; ++i) {\n        _MAP[i + 96] = i;\n    }\n\n    /**\n     * cross browser add event method\n     *\n     * @param {Element|HTMLDocument} object\n     * @param {string} type\n     * @param {Function} callback\n     * @returns void\n     */\n    function _addEvent(object, type, callback) {\n        if (object.addEventListener) {\n            object.addEventListener(type, callback, false);\n            return;\n        }\n\n        object.attachEvent('on' + type, callback);\n    }\n\n    /**\n     * takes the event and returns the key character\n     *\n     * @param {Event} e\n     * @return {string}\n     */\n    function _characterFromEvent(e) {\n\n        // for keypress events we should return the character as is\n        if (e.type == 'keypress') {\n            var character = String.fromCharCode(e.which);\n\n            // if the shift key is not pressed then it is safe to assume\n            // that we want the character to be lowercase.  this means if\n            // you accidentally have caps lock on then your key bindings\n            // will continue to work\n            //\n            // the only side effect that might not be desired is if you\n            // bind something like 'A' cause you want to trigger an\n            // event when capital A is pressed caps lock will no longer\n            // trigger the event.  shift+a will though.\n            if (!e.shiftKey) {\n                character = character.toLowerCase();\n            }\n\n            return character;\n        }\n\n        // for non keypress events the special maps are needed\n        if (_MAP[e.which]) {\n            return _MAP[e.which];\n        }\n\n        if (_KEYCODE_MAP[e.which]) {\n            return _KEYCODE_MAP[e.which];\n        }\n\n        // if it is not in the special map\n\n        // with keydown and keyup events the character seems to always\n        // come in as an uppercase character whether you are pressing shift\n        // or not.  we should make sure it is always lowercase for comparisons\n        return String.fromCharCode(e.which).toLowerCase();\n    }\n\n    /**\n     * checks if two arrays are equal\n     *\n     * @param {Array} modifiers1\n     * @param {Array} modifiers2\n     * @returns {boolean}\n     */\n    function _modifiersMatch(modifiers1, modifiers2) {\n        return modifiers1.sort().join(',') === modifiers2.sort().join(',');\n    }\n\n    /**\n     * takes a key event and figures out what the modifiers are\n     *\n     * @param {Event} e\n     * @returns {Array}\n     */\n    function _eventModifiers(e) {\n        var modifiers = [];\n\n        if (e.shiftKey) {\n            modifiers.push('shift');\n        }\n\n        if (e.altKey) {\n            modifiers.push('alt');\n        }\n\n        if (e.ctrlKey) {\n            modifiers.push('ctrl');\n        }\n\n        if (e.metaKey) {\n            modifiers.push('meta');\n        }\n\n        return modifiers;\n    }\n\n    /**\n     * prevents default for this event\n     *\n     * @param {Event} e\n     * @returns void\n     */\n    function _preventDefault(e) {\n        if (e.preventDefault) {\n            e.preventDefault();\n            return;\n        }\n\n        e.returnValue = false;\n    }\n\n    /**\n     * stops propogation for this event\n     *\n     * @param {Event} e\n     * @returns void\n     */\n    function _stopPropagation(e) {\n        if (e.stopPropagation) {\n            e.stopPropagation();\n            return;\n        }\n\n        e.cancelBubble = true;\n    }\n\n    /**\n     * determines if the keycode specified is a modifier key or not\n     *\n     * @param {string} key\n     * @returns {boolean}\n     */\n    function _isModifier(key) {\n        return key == 'shift' || key == 'ctrl' || key == 'alt' || key == 'meta';\n    }\n\n    /**\n     * reverses the map lookup so that we can look for specific keys\n     * to see what can and can't use keypress\n     *\n     * @return {Object}\n     */\n    function _getReverseMap() {\n        if (!_REVERSE_MAP) {\n            _REVERSE_MAP = {};\n            for (var key in _MAP) {\n\n                // pull out the numeric keypad from here cause keypress should\n                // be able to detect the keys from the character\n                if (key > 95 && key < 112) {\n                    continue;\n                }\n\n                if (_MAP.hasOwnProperty(key)) {\n                    _REVERSE_MAP[_MAP[key]] = key;\n                }\n            }\n        }\n        return _REVERSE_MAP;\n    }\n\n    /**\n     * picks the best action based on the key combination\n     *\n     * @param {string} key - character for key\n     * @param {Array} modifiers\n     * @param {string=} action passed in\n     */\n    function _pickBestAction(key, modifiers, action) {\n\n        // if no action was picked in we should try to pick the one\n        // that we think would work best for this key\n        if (!action) {\n            action = _getReverseMap()[key] ? 'keydown' : 'keypress';\n        }\n\n        // modifier keys don't work as expected with keypress,\n        // switch to keydown\n        if (action == 'keypress' && modifiers.length) {\n            action = 'keydown';\n        }\n\n        return action;\n    }\n\n    /**\n     * Converts from a string key combination to an array\n     *\n     * @param  {string} combination like \"command+shift+l\"\n     * @return {Array}\n     */\n    function _keysFromString(combination) {\n        if (combination === '+') {\n            return ['+'];\n        }\n\n        combination = combination.replace(/\\+{2}/g, '+plus');\n        return combination.split('+');\n    }\n\n    /**\n     * Gets info for a specific key combination\n     *\n     * @param  {string} combination key combination (\"command+s\" or \"a\" or \"*\")\n     * @param  {string=} action\n     * @returns {Object}\n     */\n    function _getKeyInfo(combination, action) {\n        var keys;\n        var key;\n        var i;\n        var modifiers = [];\n\n        // take the keys from this pattern and figure out what the actual\n        // pattern is all about\n        keys = _keysFromString(combination);\n\n        for (i = 0; i < keys.length; ++i) {\n            key = keys[i];\n\n            // normalize key names\n            if (_SPECIAL_ALIASES[key]) {\n                key = _SPECIAL_ALIASES[key];\n            }\n\n            // if this is not a keypress event then we should\n            // be smart about using shift keys\n            // this will only work for US keyboards however\n            if (action && action != 'keypress' && _SHIFT_MAP[key]) {\n                key = _SHIFT_MAP[key];\n                modifiers.push('shift');\n            }\n\n            // if this key is a modifier then add it to the list of modifiers\n            if (_isModifier(key)) {\n                modifiers.push(key);\n            }\n        }\n\n        // depending on what the key combination is\n        // we will try to pick the best event for it\n        action = _pickBestAction(key, modifiers, action);\n\n        return {\n            key: key,\n            modifiers: modifiers,\n            action: action\n        };\n    }\n\n    function _belongsTo(element, ancestor) {\n        if (element === null || element === document) {\n            return false;\n        }\n\n        if (element === ancestor) {\n            return true;\n        }\n\n        return _belongsTo(element.parentNode, ancestor);\n    }\n\n    function Mousetrap(targetElement) {\n        var self = this;\n\n        targetElement = targetElement || document;\n\n        if (!(self instanceof Mousetrap)) {\n            return new Mousetrap(targetElement);\n        }\n\n        /**\n         * element to attach key events to\n         *\n         * @type {Element}\n         */\n        self.target = targetElement;\n\n        /**\n         * a list of all the callbacks setup via Mousetrap.bind()\n         *\n         * @type {Object}\n         */\n        self._callbacks = {};\n\n        /**\n         * direct map of string combinations to callbacks used for trigger()\n         *\n         * @type {Object}\n         */\n        self._directMap = {};\n\n        /**\n         * keeps track of what level each sequence is at since multiple\n         * sequences can start out with the same sequence\n         *\n         * @type {Object}\n         */\n        var _sequenceLevels = {};\n\n        /**\n         * variable to store the setTimeout call\n         *\n         * @type {null|number}\n         */\n        var _resetTimer;\n\n        /**\n         * temporary state where we will ignore the next keyup\n         *\n         * @type {boolean|string}\n         */\n        var _ignoreNextKeyup = false;\n\n        /**\n         * temporary state where we will ignore the next keypress\n         *\n         * @type {boolean}\n         */\n        var _ignoreNextKeypress = false;\n\n        /**\n         * are we currently inside of a sequence?\n         * type of action (\"keyup\" or \"keydown\" or \"keypress\") or false\n         *\n         * @type {boolean|string}\n         */\n        var _nextExpectedAction = false;\n\n        /**\n         * resets all sequence counters except for the ones passed in\n         *\n         * @param {Object} doNotReset\n         * @returns void\n         */\n        function _resetSequences(doNotReset) {\n            doNotReset = doNotReset || {};\n\n            var activeSequences = false,\n                key;\n\n            for (key in _sequenceLevels) {\n                if (doNotReset[key]) {\n                    activeSequences = true;\n                    continue;\n                }\n                _sequenceLevels[key] = 0;\n            }\n\n            if (!activeSequences) {\n                _nextExpectedAction = false;\n            }\n        }\n\n        /**\n         * finds all callbacks that match based on the keycode, modifiers,\n         * and action\n         *\n         * @param {string} character\n         * @param {Array} modifiers\n         * @param {Event|Object} e\n         * @param {string=} sequenceName - name of the sequence we are looking for\n         * @param {string=} combination\n         * @param {number=} level\n         * @returns {Array}\n         */\n        function _getMatches(character, modifiers, e, sequenceName, combination, level) {\n            var i;\n            var callback;\n            var matches = [];\n            var action = e.type;\n\n            // if there are no events related to this keycode\n            if (!self._callbacks[character]) {\n                return [];\n            }\n\n            // if a modifier key is coming up on its own we should allow it\n            if (action == 'keyup' && _isModifier(character)) {\n                modifiers = [character];\n            }\n\n            // loop through all callbacks for the key that was pressed\n            // and see if any of them match\n            for (i = 0; i < self._callbacks[character].length; ++i) {\n                callback = self._callbacks[character][i];\n\n                // if a sequence name is not specified, but this is a sequence at\n                // the wrong level then move onto the next match\n                if (!sequenceName && callback.seq && _sequenceLevels[callback.seq] != callback.level) {\n                    continue;\n                }\n\n                // if the action we are looking for doesn't match the action we got\n                // then we should keep going\n                if (action != callback.action) {\n                    continue;\n                }\n\n                // if this is a keypress event and the meta key and control key\n                // are not pressed that means that we need to only look at the\n                // character, otherwise check the modifiers as well\n                //\n                // chrome will not fire a keypress if meta or control is down\n                // safari will fire a keypress if meta or meta+shift is down\n                // firefox will fire a keypress if meta or control is down\n                if ((action == 'keypress' && !e.metaKey && !e.ctrlKey) || _modifiersMatch(modifiers, callback.modifiers)) {\n\n                    // when you bind a combination or sequence a second time it\n                    // should overwrite the first one.  if a sequenceName or\n                    // combination is specified in this call it does just that\n                    //\n                    // @todo make deleting its own method?\n                    var deleteCombo = !sequenceName && callback.combo == combination;\n                    var deleteSequence = sequenceName && callback.seq == sequenceName && callback.level == level;\n                    if (deleteCombo || deleteSequence) {\n                        self._callbacks[character].splice(i, 1);\n                    }\n\n                    matches.push(callback);\n                }\n            }\n\n            return matches;\n        }\n\n        /**\n         * actually calls the callback function\n         *\n         * if your callback function returns false this will use the jquery\n         * convention - prevent default and stop propogation on the event\n         *\n         * @param {Function} callback\n         * @param {Event} e\n         * @returns void\n         */\n        function _fireCallback(callback, e, combo, sequence) {\n\n            // if this event should not happen stop here\n            if (self.stopCallback(e, e.target || e.srcElement, combo, sequence)) {\n                return;\n            }\n\n            if (callback(e, combo) === false) {\n                _preventDefault(e);\n                _stopPropagation(e);\n            }\n        }\n\n        /**\n         * handles a character key event\n         *\n         * @param {string} character\n         * @param {Array} modifiers\n         * @param {Event} e\n         * @returns void\n         */\n        self._handleKey = function(character, modifiers, e) {\n            var callbacks = _getMatches(character, modifiers, e);\n            var i;\n            var doNotReset = {};\n            var maxLevel = 0;\n            var processedSequenceCallback = false;\n\n            // Calculate the maxLevel for sequences so we can only execute the longest callback sequence\n            for (i = 0; i < callbacks.length; ++i) {\n                if (callbacks[i].seq) {\n                    maxLevel = Math.max(maxLevel, callbacks[i].level);\n                }\n            }\n\n            // loop through matching callbacks for this key event\n            for (i = 0; i < callbacks.length; ++i) {\n\n                // fire for all sequence callbacks\n                // this is because if for example you have multiple sequences\n                // bound such as \"g i\" and \"g t\" they both need to fire the\n                // callback for matching g cause otherwise you can only ever\n                // match the first one\n                if (callbacks[i].seq) {\n\n                    // only fire callbacks for the maxLevel to prevent\n                    // subsequences from also firing\n                    //\n                    // for example 'a option b' should not cause 'option b' to fire\n                    // even though 'option b' is part of the other sequence\n                    //\n                    // any sequences that do not match here will be discarded\n                    // below by the _resetSequences call\n                    if (callbacks[i].level != maxLevel) {\n                        continue;\n                    }\n\n                    processedSequenceCallback = true;\n\n                    // keep a list of which sequences were matches for later\n                    doNotReset[callbacks[i].seq] = 1;\n                    _fireCallback(callbacks[i].callback, e, callbacks[i].combo, callbacks[i].seq);\n                    continue;\n                }\n\n                // if there were no sequence matches but we are still here\n                // that means this is a regular match so we should fire that\n                if (!processedSequenceCallback) {\n                    _fireCallback(callbacks[i].callback, e, callbacks[i].combo);\n                }\n            }\n\n            // if the key you pressed matches the type of sequence without\n            // being a modifier (ie \"keyup\" or \"keypress\") then we should\n            // reset all sequences that were not matched by this event\n            //\n            // this is so, for example, if you have the sequence \"h a t\" and you\n            // type \"h e a r t\" it does not match.  in this case the \"e\" will\n            // cause the sequence to reset\n            //\n            // modifier keys are ignored because you can have a sequence\n            // that contains modifiers such as \"enter ctrl+space\" and in most\n            // cases the modifier key will be pressed before the next key\n            //\n            // also if you have a sequence such as \"ctrl+b a\" then pressing the\n            // \"b\" key will trigger a \"keypress\" and a \"keydown\"\n            //\n            // the \"keydown\" is expected when there is a modifier, but the\n            // \"keypress\" ends up matching the _nextExpectedAction since it occurs\n            // after and that causes the sequence to reset\n            //\n            // we ignore keypresses in a sequence that directly follow a keydown\n            // for the same character\n            var ignoreThisKeypress = e.type == 'keypress' && _ignoreNextKeypress;\n            if (e.type == _nextExpectedAction && !_isModifier(character) && !ignoreThisKeypress) {\n                _resetSequences(doNotReset);\n            }\n\n            _ignoreNextKeypress = processedSequenceCallback && e.type == 'keydown';\n        };\n\n        /**\n         * handles a keydown event\n         *\n         * @param {Event} e\n         * @returns void\n         */\n        function _handleKeyEvent(e) {\n\n            // normalize e.which for key events\n            // @see http://stackoverflow.com/questions/4285627/javascript-keycode-vs-charcode-utter-confusion\n            if (typeof e.which !== 'number') {\n                e.which = e.keyCode;\n            }\n\n            var character = _characterFromEvent(e);\n\n            // no character found then stop\n            if (!character) {\n                return;\n            }\n\n            // need to use === for the character check because the character can be 0\n            if (e.type == 'keyup' && _ignoreNextKeyup === character) {\n                _ignoreNextKeyup = false;\n                return;\n            }\n\n            self.handleKey(character, _eventModifiers(e), e);\n        }\n\n        /**\n         * called to set a 1 second timeout on the specified sequence\n         *\n         * this is so after each key press in the sequence you have 1 second\n         * to press the next key before you have to start over\n         *\n         * @returns void\n         */\n        function _resetSequenceTimer() {\n            clearTimeout(_resetTimer);\n            _resetTimer = setTimeout(_resetSequences, 1000);\n        }\n\n        /**\n         * binds a key sequence to an event\n         *\n         * @param {string} combo - combo specified in bind call\n         * @param {Array} keys\n         * @param {Function} callback\n         * @param {string=} action\n         * @returns void\n         */\n        function _bindSequence(combo, keys, callback, action) {\n\n            // start off by adding a sequence level record for this combination\n            // and setting the level to 0\n            _sequenceLevels[combo] = 0;\n\n            /**\n             * callback to increase the sequence level for this sequence and reset\n             * all other sequences that were active\n             *\n             * @param {string} nextAction\n             * @returns {Function}\n             */\n            function _increaseSequence(nextAction) {\n                return function() {\n                    _nextExpectedAction = nextAction;\n                    ++_sequenceLevels[combo];\n                    _resetSequenceTimer();\n                };\n            }\n\n            /**\n             * wraps the specified callback inside of another function in order\n             * to reset all sequence counters as soon as this sequence is done\n             *\n             * @param {Event} e\n             * @returns void\n             */\n            function _callbackAndReset(e) {\n                _fireCallback(callback, e, combo);\n\n                // we should ignore the next key up if the action is key down\n                // or keypress.  this is so if you finish a sequence and\n                // release the key the final key will not trigger a keyup\n                if (action !== 'keyup') {\n                    _ignoreNextKeyup = _characterFromEvent(e);\n                }\n\n                // weird race condition if a sequence ends with the key\n                // another sequence begins with\n                setTimeout(_resetSequences, 10);\n            }\n\n            // loop through keys one at a time and bind the appropriate callback\n            // function.  for any key leading up to the final one it should\n            // increase the sequence. after the final, it should reset all sequences\n            //\n            // if an action is specified in the original bind call then that will\n            // be used throughout.  otherwise we will pass the action that the\n            // next key in the sequence should match.  this allows a sequence\n            // to mix and match keypress and keydown events depending on which\n            // ones are better suited to the key provided\n            for (var i = 0; i < keys.length; ++i) {\n                var isFinal = i + 1 === keys.length;\n                var wrappedCallback = isFinal ? _callbackAndReset : _increaseSequence(action || _getKeyInfo(keys[i + 1]).action);\n                _bindSingle(keys[i], wrappedCallback, action, combo, i);\n            }\n        }\n\n        /**\n         * binds a single keyboard combination\n         *\n         * @param {string} combination\n         * @param {Function} callback\n         * @param {string=} action\n         * @param {string=} sequenceName - name of sequence if part of sequence\n         * @param {number=} level - what part of the sequence the command is\n         * @returns void\n         */\n        function _bindSingle(combination, callback, action, sequenceName, level) {\n\n            // store a direct mapped reference for use with Mousetrap.trigger\n            self._directMap[combination + ':' + action] = callback;\n\n            // make sure multiple spaces in a row become a single space\n            combination = combination.replace(/\\s+/g, ' ');\n\n            var sequence = combination.split(' ');\n            var info;\n\n            // if this pattern is a sequence of keys then run through this method\n            // to reprocess each pattern one key at a time\n            if (sequence.length > 1) {\n                _bindSequence(combination, sequence, callback, action);\n                return;\n            }\n\n            info = _getKeyInfo(combination, action);\n\n            // make sure to initialize array if this is the first time\n            // a callback is added for this key\n            self._callbacks[info.key] = self._callbacks[info.key] || [];\n\n            // remove an existing match if there is one\n            _getMatches(info.key, info.modifiers, {type: info.action}, sequenceName, combination, level);\n\n            // add this call back to the array\n            // if it is a sequence put it at the beginning\n            // if not put it at the end\n            //\n            // this is important because the way these are processed expects\n            // the sequence ones to come first\n            self._callbacks[info.key][sequenceName ? 'unshift' : 'push']({\n                callback: callback,\n                modifiers: info.modifiers,\n                action: info.action,\n                seq: sequenceName,\n                level: level,\n                combo: combination\n            });\n        }\n\n        /**\n         * binds multiple combinations to the same callback\n         *\n         * @param {Array} combinations\n         * @param {Function} callback\n         * @param {string|undefined} action\n         * @returns void\n         */\n        self._bindMultiple = function(combinations, callback, action) {\n            for (var i = 0; i < combinations.length; ++i) {\n                _bindSingle(combinations[i], callback, action);\n            }\n        };\n\n        // start!\n        _addEvent(targetElement, 'keypress', _handleKeyEvent);\n        _addEvent(targetElement, 'keydown', _handleKeyEvent);\n        _addEvent(targetElement, 'keyup', _handleKeyEvent);\n    }\n\n    /**\n     * binds an event to mousetrap\n     *\n     * can be a single key, a combination of keys separated with +,\n     * an array of keys, or a sequence of keys separated by spaces\n     *\n     * be sure to list the modifier keys first to make sure that the\n     * correct key ends up getting bound (the last key in the pattern)\n     *\n     * @param {string|Array} keys\n     * @param {Function} callback\n     * @param {string=} action - 'keypress', 'keydown', or 'keyup'\n     * @returns void\n     */\n    Mousetrap.prototype.bind = function(keys, callback, action) {\n        var self = this;\n        keys = keys instanceof Array ? keys : [keys];\n        self._bindMultiple.call(self, keys, callback, action);\n        return self;\n    };\n\n    /**\n     * unbinds an event to mousetrap\n     *\n     * the unbinding sets the callback function of the specified key combo\n     * to an empty function and deletes the corresponding key in the\n     * _directMap dict.\n     *\n     * TODO: actually remove this from the _callbacks dictionary instead\n     * of binding an empty function\n     *\n     * the keycombo+action has to be exactly the same as\n     * it was defined in the bind method\n     *\n     * @param {string|Array} keys\n     * @param {string} action\n     * @returns void\n     */\n    Mousetrap.prototype.unbind = function(keys, action) {\n        var self = this;\n        return self.bind.call(self, keys, function() {}, action);\n    };\n\n    /**\n     * triggers an event that has already been bound\n     *\n     * @param {string} keys\n     * @param {string=} action\n     * @returns void\n     */\n    Mousetrap.prototype.trigger = function(keys, action) {\n        var self = this;\n        if (self._directMap[keys + ':' + action]) {\n            self._directMap[keys + ':' + action]({}, keys);\n        }\n        return self;\n    };\n\n    /**\n     * resets the library back to its initial state.  this is useful\n     * if you want to clear out the current keyboard shortcuts and bind\n     * new ones - for example if you switch to another page\n     *\n     * @returns void\n     */\n    Mousetrap.prototype.reset = function() {\n        var self = this;\n        self._callbacks = {};\n        self._directMap = {};\n        return self;\n    };\n\n    /**\n     * should we stop this event before firing off callbacks\n     *\n     * @param {Event} e\n     * @param {Element} element\n     * @return {boolean}\n     */\n    Mousetrap.prototype.stopCallback = function(e, element) {\n        var self = this;\n\n        // if the element has the class \"mousetrap\" then no need to stop\n        if ((' ' + element.className + ' ').indexOf(' mousetrap ') > -1) {\n            return false;\n        }\n\n        if (_belongsTo(element, self.target)) {\n            return false;\n        }\n\n        // stop for input, select, and textarea\n        return element.tagName == 'INPUT' || element.tagName == 'SELECT' || element.tagName == 'TEXTAREA' || element.isContentEditable;\n    };\n\n    /**\n     * exposes _handleKey publicly so it can be overwritten by extensions\n     */\n    Mousetrap.prototype.handleKey = function() {\n        var self = this;\n        return self._handleKey.apply(self, arguments);\n    };\n\n    /**\n     * Init the global mousetrap functions\n     *\n     * This method is needed to allow the global mousetrap functions to work\n     * now that mousetrap is a constructor function.\n     */\n    Mousetrap.init = function() {\n        var documentMousetrap = Mousetrap(document);\n        for (var method in documentMousetrap) {\n            if (method.charAt(0) !== '_') {\n                Mousetrap[method] = (function(method) {\n                    return function() {\n                        return documentMousetrap[method].apply(documentMousetrap, arguments);\n                    };\n                } (method));\n            }\n        }\n    };\n\n    Mousetrap.init();\n\n    // expose mousetrap to the global object\n    window.Mousetrap = Mousetrap;\n\n    // expose as a common js module\n    if (typeof module !== 'undefined' && module.exports) {\n        module.exports = Mousetrap;\n    }\n\n    // expose mousetrap as an AMD module\n    if (typeof define === 'function' && define.amd) {\n        define(function() {\n            return Mousetrap;\n        });\n    }\n}) (window, document);\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/mousetrap/mousetrap.js\n ** module id = 5\n ** module chunks = 0\n **/"],"sourceRoot":""}